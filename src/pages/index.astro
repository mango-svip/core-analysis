---
// import GC from "../components/GC.astro";
import GCard from '../components/GCard.astro';
import GCardV0 from '../components/GCard_v0.astro';
import Layout from "../layouts/Layout.astro";

const url = 'https://proxy.finance.qq.com/ifzqgtimg/appstock/app/ReverseRepo/get?app=wzq';
const response = await fetch(url);
const json =  await response.json();
const isError = json == null || json.code != 0
const data = json.data.data;
const bestOnGivenDay = json.data.bestOnGivenDay;
const szData = data.sz;
const shData = data.sh;
const requestUrl =  new URL(Astro.request.url);
const buyAmount = requestUrl.searchParams.get('buyAmount') || 10;
const profit = requestUrl.searchParams.get('profit') || 0.45;

const rateMap = {
    '1':   0.00001,
    '2':   0.00002,
    '3':   0.00003,
    '4':   0.00004,
    '7':   0.00005,
    '14':  0.00010,
    '28':  0.00020,
    '91':  0.00030,
    '182': 0.00030
}



const maxIncomePerThousandData = shData.map(item => {
    const fee = (Number(buyAmount) * Number(rateMap[item.term]))
    const earnings = (Number(buyAmount) * Number(item.zxj) * Number(item.lockDays)/100/365) - fee
    return {
        item: item,
        maxIncome: ( earnings / item.lockDays / buyAmount * 10000).toFixed(4)
    }
})






---

<Layout  title="国债逆回购">
   <div class="mx-auto w-full min-w-max max-w-2xl bg-gray-50">
    {
        isError && <p> 请求数据错误 </p>
    }

    { !isError &&
    <div class="form-control m-2 items-end">
        <div class="flex items-center">
            <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    class="text-red-500 mr-2"
                >
                <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"></polygon>
            </svg>
            <span class="text-gray-700">购买金额：</span>
            <input class="border border-gray-300 rounded px-2 py-1 text-sm" placeholder={buyAmount} type="text" id="buyAmount" />
            <span>万元</span>
        </div>
    </div>

    <div class="items-end flex m-2 mb-0 justify-end ">
        <div class="flex items-center gap-4 mb-6">
            <div class="bg-gray-100 p-1 rounded-full inline-flex">
                <button
                class="px-4 py-2 rounded-full text-sm bg-primary text-white" id="sortToggleByLock"
                >
                按资金锁定天数排序
                </button>
                <button class="px-4 py-2 rounded-full text-sm text-gray-600" id="sortToggle">
                按每万元收益排序
                </button>
          </div>
        </div>
      
        <div class="w-36 text-end">
            <!-- 
            <label class="swap">
                <input type="checkbox" class="toggle toggle-error -translate-x-10" id="toggle2" checked />
                <div class="swap-on text-red-500">沪市</div>
                <div class="swap-off text-gray-500">深市</div>
            </label>
        -->
            <label class="rocker rocker-small">
                <input type="checkbox" id="toggle" checked>
                <span class="switch-left">沪市</span>
                <span class="switch-right">深市</span>
            </label>
        </div>


    </div>
    <div class="hidden box-border w-full mx-auto " id="szItem">
        {
            szData.sort((item1, item2) => {
                if(bestOnGivenDay.sc != 'sz') {
                    return 0;
                }
                if(bestOnGivenDay.term == item1.term) {
                    return -1;
                }
                if(bestOnGivenDay.term == item2.term) {
                    return 1;
                }
            }).map(item => {
                if(bestOnGivenDay.sc == 'sz' && bestOnGivenDay.term == item.term) {
                    item.bestOnGivenDay = true;
                }
                return <GCardV0 item={item} buyAmount={Number(buyAmount * 10000)}  items={szData} profit={profit}/>
            } )
        }   
    </div>


    <div class="w-full box-border mx-auto" id="shItem">
        {
            shData.sort((item1, item2) => {
                if(bestOnGivenDay.sc != 'sh') {
                    return 0;
                }
                if(bestOnGivenDay.term == item1.term) {
                    return -1;
                }
                if(bestOnGivenDay.term == item2.term) {
                    return 1;
                }
            }).map(item => {
                if(bestOnGivenDay.sc == 'sh' && bestOnGivenDay.term == item.term) {
                    item.bestOnGivenDay = true;
                }
                return <GCardV0 item={item} buyAmount={Number(buyAmount * 10000)} items={shData} profit={profit}/>
            } )
        }   
    </div>

    }
    
   </div>
</Layout>

<style>
    /* Switch starts here */
.rocker {
  display: inline-block;
  position: relative;
  /*
  SIZE OF SWITCH
  ==============
  All sizes are in em - therefore
  changing the font-size here
  will change the size of the switch.
  See .rocker-small below as example.
  */
  font-size: 2em;
  font-weight: bold;
  text-align: center;
  text-transform: uppercase;
  color: #888;
  width: 7em;
  height: 4em;
  overflow: hidden;
  border-bottom: 0.5em solid #eee;
}

.rocker-small {
  font-size: 0.75em;
 /* Sizes the switch */
  margin: 1em;
}

.rocker::before {
  content: "";
  position: absolute;
  top: 0.5em;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #999;
  border: 0.5em solid #eee;
  border-bottom: 0;
}

.rocker input {
  opacity: 0;
  width: 0;
  height: 0;
}

.switch-left,
.switch-right {
  cursor: pointer;
  position: absolute;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 2.5em;
  width: 3em;
  transition: 0.2s;
  user-select: none;
}

.switch-left {
  height: 2.4em;
  width: 2.75em;
  left: 0.85em;
  bottom: 0.4em;
  background-color: #ddd;
  transform: rotate(15deg) skewX(15deg);
}

.switch-right {
  right: 0.5em;
  bottom: 0;
  background-color: #bd5757;
  color: #fff;
}

.switch-left::before,
.switch-right::before {
  content: "";
  position: absolute;
  width: 0.4em;
  height: 2.45em;
  bottom: -0.45em;
  background-color: #ccc;
  transform: skewY(-65deg);
}

.switch-left::before {
  left: -0.4em;
}

.switch-right::before {
  right: -0.375em;
  background-color: transparent;
  transform: skewY(65deg);
}

input:checked + .switch-left {
  background-color: #0084d0;
  color: #fff;
  bottom: 0px;
  left: 0.5em;
  height: 2.5em;
  width: 3em;
  transform: rotate(0deg) skewX(0deg);
}

input:checked + .switch-left::before {
  background-color: transparent;
  width: 3.0833em;
}

input:checked + .switch-left + .switch-right {
  background-color: #ddd;
  color: #888;
  bottom: 0.4em;
  right: 0.8em;
  height: 2.4em;
  width: 2.75em;
  transform: rotate(-15deg) skewX(-15deg);
}

input:checked + .switch-left + .switch-right::before {
  background-color: #ccc;
}

/* Keyboard Users */
input:focus + .switch-left {
  color: #333;
}

input:checked:focus + .switch-left {
  color: #fff;
}

input:focus + .switch-left + .switch-right {
  color: #fff;
}

input:checked:focus + .switch-left + .switch-right {
  color: #333;
}
</style>

<script>

    let toggle=document.querySelector('#toggle');
    toggle?.addEventListener('click', function(e) {
        let res = e.target.checked;

        let szItem = document.querySelector('#szItem');
        let shItem = document.querySelector('#shItem');
        shItem.className = 'hidden';
        szItem.className = 'hidden';
        let className = 'box-border w-full mx-auto';
        if(res) {
            shItem.className = className;
        } else {
            szItem.className = className;
        }

    })

    document.querySelector("#sortToggle")?.addEventListener('click', function(e) {

        let sortToggle = document.querySelector('#sortToggle');
        sortToggle.classList.add('bg-primary');
        sortToggle.classList.add('text-white');
        sortToggle.classList.remove('text-gray-600');

        let sortToggleByLock = document.querySelector('#sortToggleByLock');
        sortToggleByLock.classList.remove('bg-primary');
        sortToggleByLock.classList.remove('text-white');
        sortToggleByLock.classList.add('text-gray-600');

        let shItem = document.querySelector('#shItem');
        let selector = '[data-key=gc]';
            let targetContainer = '';
            if(shItem?.className.indexOf('hidden') < 0) {
                targetContainer = "#shItem";
                selector = '#shItem > ' + selector;
            } else {
                targetContainer = "#szItem";
                selector = '#szItem > ' + selector;
            }
            // 获取所有包含信息的父元素
            const containers = document.querySelectorAll(selector);
            // 将 NodeList 转换为数组
            const dataArray = Array.from(containers);

            // 按每万元收益数值排序
            dataArray.sort((a, b) => {
            // 从每个元素中提取收益数值，这里使用的是正则表达式提取数字
            const extractNumber = (element) => parseFloat(element.textContent.match(/\d+\.\d+/)[0]);
            const aIncome = extractNumber(a.querySelector('[data-key=incomePerThousand]'));
            const bIncome = extractNumber(b.querySelector('[data-key=incomePerThousand]'));

            return bIncome - aIncome;
            });

            // 重新按排序后的顺序添加到页面
            const parentElement = document.querySelector(targetContainer);
            dataArray.forEach((item) => {
            parentElement.appendChild(item);
            });
    })

    document.querySelector("#sortToggleByLock")?.addEventListener('click', function(e) {

        let sortToggle = document.querySelector('#sortToggle');
        sortToggle.classList.remove('bg-primary');
        sortToggle.classList.remove('text-white');
        sortToggle.classList.add('text-gray-600');

        let sortToggleByLock = document.querySelector('#sortToggleByLock');
        sortToggleByLock.classList.add('bg-primary');
        sortToggleByLock.classList.add('text-white');
        sortToggleByLock.classList.remove('text-gray-600');


        let shItem = document.querySelector('#shItem');
        let selector = '[data-key=gc]';
            let targetContainer = '';
            if(shItem?.className.indexOf('hidden') < 0) {
                targetContainer = "#shItem";
                selector = '#shItem > ' + selector;
            } else {
                targetContainer = "#szItem";
                selector = '#szItem > ' + selector;
            }
            // 获取所有包含信息的父元素
            const containers = document.querySelectorAll(selector);
            // 将 NodeList 转换为数组
            const dataArray = Array.from(containers);

            // 按每万元收益数值排序
            dataArray.sort((a, b) => {
            // 从每个元素中提取收益数值，这里使用的是正则表达式提取数字
            const extractNumber = (element) => parseInt((element.textContent.match(/\d+/))[0]);
            const aLockDays = extractNumber(a.querySelector('[data-key=lockDays]'));
            const bLockDays = extractNumber(b.querySelector('[data-key=lockDays]'));

            const extractNumber2 = (element) => parseFloat(element.textContent.match(/\d+\.\d+/)[0]);
            const aIncome = extractNumber2(a.querySelector('[data-key=incomePerThousand]'));
            const bIncome = extractNumber2(b.querySelector('[data-key=incomePerThousand]'));

            if(bLockDays == aLockDays) {
                return bIncome - aIncome;
            }
            
            return aLockDays - bLockDays;
            });

            // 重新按排序后的顺序添加到页面
            const parentElement = document.querySelector(targetContainer);
            dataArray.forEach((item) => {
            parentElement.appendChild(item);
            });
    })
;
    let buyAmount = document.querySelector('#buyAmount');
    buyAmount.addEventListener('blur', function(e) {
        if(e.target.value == '') {
            return;
        }
        let url = new URL(window.location.href);
        url.searchParams.set('buyAmount', e.target.value);
        url.searchParams.set('profit', '0.45');
        window.location.href = url.href;

    })
    buyAmount.addEventListener('keydown', (e) => {
        if (e.key != 'Enter') {
            return;
        }
        if(e.target.value == '') {
            return;
        }
        let url = new URL(window.location.href);
        url.searchParams.set('buyAmount', e.target.value);
        url.searchParams.set('profit', '0.45');
        window.location.href = url.href;
    });


</script>